import torch

print(torch.tenser([1,2],[3,4]))
print(torch.tenser([1,2],[3,4], device="cuda:0"))
print(torch.tenser([1,2],[3,4], dtype=torch.float64))

temp = torch.tensor([[1,2,],[3,4]])
print(temp.shape)
print('---------------------')
print(temp.view(4, 1))
print('---------------------')
print(temp.view(-1))
print('---------------------')
print(temp.view(1, -1))
print('---------------------')
print(temp.view(-1, 1))




import java.util.Scanner;
public class ex {
    public static void p1(String[] args) {

        int n1; int n2;
        int[][] A ={{1,2}, {1,3}, {2,5}, {3, 7}, {4,7}, {4, 9}, {2, 7}, {4, 11}, {1, 5}};
        Scanner scanner = new Scanner(System.in);
        n1[0] = scanner.nextInt();
        n2[0] = scanner.nextInt();

        int match = 0;
        int big = 0;
        float n = n1 / n2;
        for (int t = 0; t < 9; t ++) {
            float At = A[t][0] / A[t][1];
            if (n = At) {
                match += 1;
            }
            else if(n < At) {
                big += 1;
            }
        }
        System.out.println(match);
        System.out.println(big);
    }

}


#ifndef MsTimer2_h
#define MsTimer2_h

#include <avr/interrupt.h>

namespace MsTimer2 {
	extern unsigned long msecs;
	extern void (*func)();
	extern volatile unsigned long count;
	extern volatile char overflowing;
	extern volatile unsigned int tcnt2;
	
	void set(unsigned long ms, void (*f)());
	void start();
	void stop();
	void _overflow();
}

#endif


unsigned long MsTimer2::msecs;
void (*MsTimer2::func)();
volatile unsigned long MsTimer2::count;
volatile char MsTimer2::overflowing;
volatile unsigned int MsTimer2::tcnt2;

void MsTimer2::set(unsigned long ms, void (*f)()) {
	float prescaler = 0.0;
	
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TIMSK2 &= ~(1<<TOIE2);
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
	TCCR2B &= ~(1<<WGM22);
	ASSR &= ~(1<<AS2);
	TIMSK2 &= ~(1<<OCIE2A);
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
		prescaler = 64.0;
	} else if (F_CPU < 1000000UL) {	// prescaler set to 8
		TCCR2B |= (1<<CS21);
		TCCR2B &= ~((1<<CS22) | (1<<CS20));
		prescaler = 8.0;
	} else { // F_CPU > 16Mhz, prescaler set to 128
		TCCR2B |= ((1<<CS22) | (1<<CS20));
		TCCR2B &= ~(1<<CS21);
		prescaler = 128.0;
	}
#elif defined (__AVR_ATmega8__)
	TIMSK &= ~(1<<TOIE2);
	TCCR2 &= ~((1<<WGM21) | (1<<WGM20));
	TIMSK &= ~(1<<OCIE2);
	ASSR &= ~(1<<AS2);
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2 |= (1<<CS22);
		TCCR2 &= ~((1<<CS21) | (1<<CS20));
		prescaler = 64.0;
	} else if (F_CPU < 1000000UL) {	// prescaler set to 8
		TCCR2 |= (1<<CS21);
		TCCR2 &= ~((1<<CS22) | (1<<CS20));
		prescaler = 8.0;
	} else { // F_CPU > 16Mhz, prescaler set to 128
		TCCR2 |= ((1<<CS22) && (1<<CS20));
		TCCR2 &= ~(1<<CS21);
		prescaler = 128.0;
	}
#elif defined (__AVR_ATmega128__)
	TIMSK &= ~(1<<TOIE2);
	TCCR2 &= ~((1<<WGM21) | (1<<WGM20));
	TIMSK &= ~(1<<OCIE2);
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2 |= ((1<<CS21) | (1<<CS20));
		TCCR2 &= ~(1<<CS22);
		prescaler = 64.0;
	} else if (F_CPU < 1000000UL) {	// prescaler set to 8
		TCCR2 |= (1<<CS21);
		TCCR2 &= ~((1<<CS22) | (1<<CS20));
		prescaler = 8.0;
	} else { // F_CPU > 16Mhz, prescaler set to 256
		TCCR2 |= (1<<CS22);
		TCCR2 &= ~((1<<CS21) | (1<<CS20));
		prescaler = 256.0;
	}
#endif
	
	tcnt2 = 256 - (int)((float)F_CPU * 0.001 / prescaler);
	
	if (ms == 0)
		msecs = 1;
	else
		msecs = ms;
		
	func = f;
}

void MsTimer2::start() {
	count = 0;
	overflowing = 0;
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = tcnt2;
	TIMSK2 |= (1<<TOIE2);
#elif defined (__AVR_ATmega128__)
	TCNT2 = tcnt2;
	TIMSK |= (1<<TOIE2);
#elif defined (__AVR_ATmega8__)
	TCNT2 = tcnt2;
	TIMSK |= (1<<TOIE2);
#endif
}

void MsTimer2::stop() {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TIMSK2 &= ~(1<<TOIE2);
#elif defined (__AVR_ATmega128__)
	TIMSK &= ~(1<<TOIE2);
#elif defined (__AVR_ATmega8__)
	TIMSK &= ~(1<<TOIE2);
#endif
}

void MsTimer2::_overflow() {
	count += 1;
	
	if (count >= msecs && !overflowing) {
		overflowing = 1;
		count = 0;
		(*func)();
		overflowing = 0;
	}
}

ISR(TIMER2_OVF_vect) {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = MsTimer2::tcnt2;
#elif defined (__AVR_ATmega128__)
	TCNT2 = MsTimer2::tcnt2;
#elif defined (__AVR_ATmega8__)
	TCNT2 = MsTimer2::tcnt2;
#endif
	MsTimer2::_overflow();
}


const int LED1=9;
const int LED2=8;

void setup()
{
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  MsTimer2::set(500, flash); // 500ms period
}

void loop()
{
  digitalWrite(LED1, HIGH);
  MsTimer2::start();
  delay(1000); // Wait for 1000 millisecond(s)
  digitalWrite(LED1, LOW);
  delay(1000); // Wait for 1000 millisecond(s)
  MsTimer2::stop();
}

void flash() {  
  static boolean output = HIGH;
  digitalWrite(LED2, output);
  output = !output;
}

import java.util.Scanner;

public class A {
    
    static int Area(int Ax, int Ay, int Bx, int By, int Cx, int Cy) {
        int ss = 0;
        ss += Ax * By - Ay * Bx;
        ss += Bx * Cy - By * Cx;
        ss += Cx * Ay - Cy * Ax;
        return Math.abs(ss/2);
    }
    
    public static void main(String[] args) {
        System.out.println(Area(0,0, 2,0, 0,1));

        int[]a = {0,0}, b = {2,0}, c = {0,1};
        System.out.println(Area(a, b, c));

        int[][] p = {{0,0},{2,0},{0,1}};
        System.out.println(Area(p));
    }
}

def solution(s):
    
    
    data_list = []
    turn = 0
    
    
    for sf in s:
        if sf.isdigit() == True:
            if s[turn - 1] == "-":
                sf = "-" + sf
                data_list.append(int(sf))

            else:
                data_list.append(int(sf))

        turn += 1
    
    sorted_data_list = list(sorted(data_list))
    # print(sorted_data_list)
    answer = (f"{sorted_data_list[0]} {sorted_data_list[-1]}")
    
    
    return answer
#첫과제 다음수업까지 숫자를 모두 더하는 코드 짜기
#'123ab57bn1
s = 0
for i in '123ab57bn1':
    if i = int
        s+=int(i)
       
s  
 
q = '123ab57bn1'

for i in '123ab57bn1':
    if i = int
        s+=in

q = '123ab57bn1'
w = 0
e = 0

while w < len(q):
    if q[w].isdigit() == True:
        e += int(q[w])     
        w += 1

    else:
        w += 1
print(w)
print(e)


q = '123ab57bn1'

q.isdigit()

q='123qwe'
w=5


if q[w]==str:
    print('글자')
else :
    print('숫자')

q = '123ab57bn1'
w= 2


q[w]

x = 0
while x < 5:
    print('hello wolrd')
    x += 1
print('end')


#답
q = '123ab57bn1'
w = 0
e = 0

while w < len(q):
    if q[w].isdigit() == True:
        e += int(q[w])     
        w += 1

    else:
        w += 1
print(e)


###

def solution(data):
    w = 0
    e = 0

    for x in (data): 
        if data[w].isdigit() == True: 
            e += int(data[w]) 
            w += 1 
        else: 
            w += 1
    
    
    return e

solution('1q2w3e4r')

###

def solution(data):
    w = 0
    e = 0

    for x in (data): 
        if data[w].isdigit() == True: 
            e += int(data[w]) 
            w += 1 
        else: 
            w += 1
    
    
    return e

solution('1q2w3e4r')


s = np.arange(12)
s = pd.Series(s)
s.count()
s.describe()


s = 10

x=[]
y=[]


for i in range(-s,s+1):
    i.append(x)

for t in x:
    u = t**2
    y.append(u)


import numpy as np

a = np.arange(11).reshape(3,4)

max(a)
max(a, axis =0 )

class solution:

    def __init__(self, account):
        self.data = data

class solution:

    def __init__(self, name, start_time, end_time):
        self.name = name = data[:7]
        self.start_time = start_time = data[8:-5]
        self.end_time = end_time = data[-5:]



    def end_time_first(self):
        end_time = sorted(data[-5:])
        return end_time


print(solution(['Flight A,07:00,09:30', 'Flight B,06:30,09:00', 'Flight C,07:30,10:00']))# == Flight B)
print(solution(['Flight D,08:00,10:00', 'Flight E,08:30,10:30', 'Flight F,07:45,10:15']))# == Flight D)
print(solution(['Flight G,09:00,11:00', 'Flight H,09:30,11:30', 'Flight I,08:00,10:00']))# == Flight I)


#incloud <stdio.h>

void main()
{
int = i

for (i = 0; i <= 10; i ++;)
def solution(n):
    
    
    p_f = [0,1] 
    turn = 0
    
    
    while n - 2 >= turn:
        if 2 <= n:
            p_f.append(p_f[-1] + p_f[-2])
        turn += 1
    print(p_f)
    answer = (p_f[n] / 1234567)
    if answer != int:
        answer = int(str(answer)[0]) + 1
    return answer
print(solution(3))
print(solution(5))
print(solution(15))


def solution(s):
    
    
    data_list = []
    
    
    for sf in s:
        if sf.isdigit() == True:
            data_list.append(sf)
    
    
    sorted_data_list = list(sorted(data_list))
    answer = (f"\"{sorted_data_list[0]} {sorted_data_list[-1]}\"")
    
    
    return answer


kiosk = ['떡볶이', '라면', '순대', '어묵']

order = input('메뉴를 입력해주세요')

if order in kiosk:
    print(f'{order} 주문이 완료되였습이다.')
else:
    print(f'{order} 라는 메뉴는 없습니다.')
import java.util.Scanner;

public class java1 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.close();

        for (int i = 0; i < n; i ++) {
            for (int j = 0; j < n + 1; j ++)
                System.out.print(" ");
            for (int j = 0; j < i + 1; j ++)
                System.out.print("*");
            System.out.println(" ");
        }

    }
}
def solution(data):
 

    answer = []
 

    for dataf in data:
        if dataf.isdigit():
            answer.append(int(dataf))
 

    answer = sum(answer)
    return answer
import java.util.Scanner;
public class ex {
    public static void p1(String[] args) {

        Scanner scanner = new Scanner(System.in);
        
        String str_1 = scanner.nextInt();
        String str_2 = scanner.nextInt();
        
        
        // String str_1 = "aa";
        // String str_2 = "b";
        
        int str_1_c = 0;
        int str_2_c = 0;
        
        String[] arr_1;
        String[] arr_2;
        
        int match = 0;
        int arr_n_1 = 0;
        int arr_n_2 = 0;
        
        
        int answer = 0;
        
        int arr_turn_1 = 0;
        int arr_turn_2 = 0;
        
        
        for (int turn_1 = 0; turn_1 < str_1.lenght; turn_1 ++) {
            for (int turn_2 = 0; turn_2 < arr_n_1; turn_2 ++) {
                if (str_1[turn_1] == arr_1[turn_2]) {
                    match = 1;
                }
            }
            if (match == 0) {
                arr[arr_turn_1] = str_1[turn_1];
                arr_n_1 += 1;
                arr_turn_1 += 1;
            }
            else {
                str_1_c += 1;
            }
            match = 0;
        }
        
        for (int turn_1 = 0; turn_1 < str_2.lenght; turn_1 ++) {
            for (int turn_2 = 0; turn_2 < arr_n_2; turn_2 ++) {
                if (str_2[turn_1] == arr_2[turn_2]) {
                    match = 1;
                }
            }
            if (match == 0) {
                arr[arr_turn_2] = str_1[turn_1];
                arr_n_2 += 1;
                arr_turn_2 += 1;
            }
            else {
                str_1_c += 1;
            }
            match = 0;
        }
        
        if (str_1_c - str_2_c <= 1) {
            System.out.println("True");
        }
        else {

            System.out.println("False");   
        }
    }
        
}
