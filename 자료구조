
def search_note(self, word):
    for page in self.notes:
        if word in self.notes[page]:
            print(page, "페이지:", self.notes[page])


class notebook():
    def __init__(self,title):
        self.title = title
        self.page_number = 1
        self.notes = {}

    def add_note(self, note, page = 0):
        if self.page_number < 300:
            if page == 0:
                self.notes[self.page_number] = note
                self.page_number += 1
            else:
                self.notes = {page:note}
                self.page_number += 1
        else:
            print("Page가 모두 채워졌습니다.")

    def remove_note(self, page_number):
        if page_number in self.notes.keys():
            return self.notes.pop(page_number)
        else:
            print("해당 페이지는 존재하지 않습니다.")

    def get_number_of_pages(self):
        return len(self.notes.keys())

class note():
    def __init__(self, contents = None):
        self.contents = contents

    def write_contents(self, contents):
        self.contents = contents

    def remove_all(self):
        self.contents = ""

    def __str__(self):
        return self.contents

class Sp(obj):
    def __init__(self, name, position, back_number):
        self.name = name
        self.position = position
        self.back_number = back_number
    def cbn(self, new_number):
        print

f = lambda x, y: x + y
print(f(2,6))

def f(x,y):
    return x + y

print(f(1,4))

for i, v in enumerate(['tic','tac','toe']):
    print(i,v)

re = [[i + j for i in c1]for j in c2]
re

wr = 'The quick brown fox jumps over the lazy dog'.split()
print(wr)
s = [[w.upper(),w.lower(),len(w)]for w in wr]
print(s)

c1 = ["a","b",'c']
c2 = ['d','e','a']

re = [i + j for i in c1 for j in c2 if not(i==j)]
re

country_code = {}
country_code = {"America":1,"korea":82,"china":86,"Japan":81}
country_code

country_code.keys()

country_code["German"] = 49
country_code.values()



s1 = set([1,2,3,4,5])
s2 = set([3,4,5,6,7,8])

s1.union(s2)
s1 | s2
s1.intersection(s2)
s1 & s2
s1.difference(s2)
s1 - s2


a = [1,2,3,4,5]
a.append(10)
a.append(20)
a.pop(0)
a.pop(0)


print("Product: %(name)5s,Price per unit: %(price)5.5f."%{"name":"Apple","price":5.243})


def f(n):
    # a = 1
    # for i in range(1,n):
    #     a = a * i
    # a = a * n
    # return a
    if (n == 1):
        return n
    else :
        n -= 1
        return n
print(f(int(input("number :"))))

def ast(*args):
    x,y,*z=args
    return x, y, z
print(ast(3,4,5))


f = open("don't look back in anger.txt","r")
lyric = f.readlines()
f.close
def s():
    c = 0
    for i in lyric:
        c += i.count('Sally')
    return c
# print(lyric)
print(s())

class Set:
    def __init__(self):
        self.items = []
    def size(self):
        return len(self.items)
    def display(self, msg):
        print(msg, self.items)
    def contains(self, item):
        return item in self.items
    def insert(e):
        if e not in self.items:
            self.items.append(e)
    def delete(e):
        if e in self.items:
            self.items.remove(e)
    # def equals(setB):

    def union(self, setB):
        setC = Set()
        setC.items = list(self.items)
        for e in setB.items:
            if e not in self.items:
                setC.items.append(e)
        return setC
    def difference(self, setB):
        setC = Set()
        for e in self.items:
            if e not in setB.items:
                setC.items.append(e)
        return setC
    def intersect(self, setB):
        setC = Set()
        for e in self.items:
            if e in setB.items:
                setC.items.append(e)
        return setC

def stackc(data):
    s = []

    for i in data:
        if (i == '('):
            s.append(i)
        elif (i == "{"):
            s.append(i)
        elif (i == '['):
            s.append(i)
        elif (i == ')') and (s[-1] == '('):
            s.pop()
        elif (i == '}') and (s[-1] == '{'):
            s.pop()
        elif (i == ']') and (s[-1] == '['):
            s.pop()
    if (len(s) == 0):
        return True
    else:
        return False

stackc('({{})')
