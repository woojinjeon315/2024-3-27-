#include <Wire.h>


void setup() {
  Wire.begin();
  Serial.begin(9600);
  
  pinMode(2, INPUT); //A
  pinMode(3, INPUT); //B
  pinMode(4, INPUT); //C
  pinMode(5, INPUT); //D
  pinMode(6, INPUT); //E
  pinMode(7, INPUT); //F
  pinMode(8, INPUT); //G
  pinMode(9, INPUT); //H
  pinMode(10, INPUT); //I
  pinMode(11, INPUT); //J
  pinMode(12, INPUT); //K
  pinMode(13, INPUT); //L


}

void loop() {
  int A = digitalRead(2);
  Serial.println(" A:" + String(A));
  Wire.beginTransmission(1);
  Wire.write("A");
  Wire.write(A);
  Wire.endTransmission();

  
  int B = digitalRead(3);
  Serial.println(" B:" + String(B));
  Wire.beginTransmission(1);
  Wire.write("B");
  Wire.write(B);
  Wire.endTransmission();

  
  int C = digitalRead(4);
  Serial.println(" C:" + String(C));
  Wire.beginTransmission(1);
  Wire.write("C");
  Wire.write(C);
  Wire.endTransmission();

  
  int D = digitalRead(5);
  Serial.println(" D:" + String(D));
  Wire.beginTransmission(1);
  Wire.write("D");
  Wire.write(D);
  Wire.endTransmission();

  
  int E = digitalRead(6);
  Serial.println(" E:" + String(E));
  Wire.beginTransmission(1);
  Wire.write("E");
  Wire.write(E);
  Wire.endTransmission();
  
  
  int F = digitalRead(7);
  Serial.println(" F:" + String(F));
  Wire.beginTransmission(1);
  Wire.write("F");
  Wire.write(F);
  Wire.endTransmission();

  
  int G = digitalRead(8);
  Serial.println(" G:" + String(G));
  Wire.beginTransmission(1);
  Wire.write("G");
  Wire.write(G);
  Wire.endTransmission();

  
  int H = digitalRead(9);
  Serial.println(" H:" + String(H));
  Wire.beginTransmission(1);
  Wire.write("H");
  Wire.write(H);
  Wire.endTransmission();

  
  int I = digitalRead(10);
  Serial.println(" I:" + String(I));
  Wire.beginTransmission(1);
  Wire.write("I");
  Wire.write(I);
  Wire.endTransmission();

  
  int J = digitalRead(11);
  Serial.println(" J:" + String(J));
  Wire.beginTransmission(1);
  Wire.write("J");
  Wire.write(J);
  Wire.endTransmission();
  
  
  int K = digitalRead(12);
  Serial.println(" K:" + String(K));
  Wire.beginTransmission(1);
  Wire.write("K");
  Wire.write(K);
  Wire.endTransmission();

  
  int L = digitalRead(13);
  Serial.println(" L:" + String(L));
  Wire.beginTransmission(1);
  Wire.write("L");
  Wire.write(L);
  Wire.endTransmission();
  
  delay(1000);
}


#include <Wire.h>

char bf_code' ';
char code = ' ';
int value = 0;
int A_f_ack = 0;
byte recvDataBuf[120];

void setup() {
  Wire.begin(1);
  Wire.onRequest(requestEvent);
  Wire.onReceive(receiveEvent);
  
  Serial.begin(9600);
}

void loop() {
  delay(50000);
}

void A_f() { // +
  
  A_f_ack = 1;

}

void receiveEvent(int howMany) {
  if (Wire.available()) {
    code = Wire.read();
    value = Wire.read();
    Serial.println("code: " + String(code) + "  Value: " + String(value));
  }
  
  if (code == 'A' && value == 1 && A_f_ack == 0) {
    A_f(); 
    Serial.println("");
    A_f_ack = 0; 
  }
}

void requestEvent() {
  Wire.write("ok!\n");
}


bf cord 아두이노 이식가능 
unsigned char tape[30000] = { 0 };

unsigned char* ptr = tape;

void interpret(char* input)
{
	char current_char;
	unsigned int i, loop;

	for (i = 0; input[i] != 0; ++i)
	{
		current_char = input[i];

		switch (current_char)
		{
		case '>':
			++ptr;
			break;
		case '<':
			--ptr;
			break;
		case '+':
			++*ptr;
			break;
		case '-':
			--*ptr;
			break;
		case '.':
			putchar(*ptr);
			break;
		case ',':
			*ptr = getchar();
			break;
		case '[':
			if (*ptr == 0)
			{
				loop = 1;
				while (loop > 0)
				{
					current_char = input[++i];
					if (current_char == '[')
						loop++;
					else if (current_char == ']')
						loop--;
				}
			}
			break;
		case ']':
			if (*ptr)
			{
				loop = 1;
				while (loop > 0)
				{
					current_char = input[--i];
					if (current_char == '[')
						loop--;
					else if (current_char == ']')
						loop++;
				}
			}
		}
	}
}

int brainfuck()
{

	char str[1024];
    Serial.println(str);

	//Serial.read(str, 1024);

	interpret(str);
	putchar('\n');

	return 0;
}

bf code


모니터 키 코딩 (15,0), (15,1) 에 글자 프린트

void direction_f() {
  if (direction == 0) {
    lcd.setCursor(15, 1);
  	lcd.print("U"); 
  }
  
  else if (direction == 1) {
    lcd.setCursor(15, 1);
  	lcd.print("R"); 
  }
  
  else if (direction == 2) {
    lcd.setCursor(15, 1);
  	lcd.print("D"); 
  }
  
  else if (direction == 3) {
    lcd.setCursor(15, 1);
  	lcd.print("L"); 
  }
  //direction = direction % 4;
  //change = change % 3;
  
  //delay(300);
}

void change_f() {
  if (change == 0) {
    lcd.setCursor(15, 0);
  	lcd.print("E"); 
  }
  
  else if (change == 1) {
    lcd.setCursor(15, 0);
  	lcd.print("S"); 
  }
  
  else if (change == 2) {
    lcd.setCursor(15, 0);
  	lcd.print("D"); 
  }
  
  //direction = direction % 4;
  //change = change % 3;
  
  //delay(300);
}






// 아두이노 설계 0
// 모니터 코딩
// 아두이노 bf 연결
// bf 적용 0

//모니터 (16, 2);
//ㅁㅁㅁㅁ ㅁㅁㅁㅁ ㅁㅁㅁㅁ ㅁㅁㅁㅁ
//ㅁㅁㅁㅁ ㅁㅁㅁㅁ ㅁㅁㅁㅁ ㅁㅁㅁㅁ

//(0,0), (0,1) 줄 프린트
//(16,0), (16,1) change, direction
//change 는 enter, space, del,direction_input 순서대로 변환
//direction 는 front, right, back, left 순서로 변환
//input 입력시 헤딩하는 함수 반환
