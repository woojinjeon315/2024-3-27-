#include <stdio.h>

void main() {

    int width_turn = 0;
    int height_turn = 0;

    int width_max = 3;
    int height_max = 3;

    printf("Tic! Tac! Toe! 게임이 실행되었습니다. 게임의 크기는 3X3입니다.\n");
    printf("각 항목의 번호는 다음과 같습니다. X가 먼저시작합니다.\n");
    printf("가로, 세로, 대각선으로 3개의 표식을 연속시키면 승리하게됩니다.\n");

    int ex[3][3] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };
    printf("%d ", ex[3]);


    int arr[3][3] = {
        {1, 1, 1},
        {1, 1, 1},
        {1, 1, 1}
    };

    /*for (height_turn = 0; height_turn < 3; height_turn ++) {
        for (width_turn = 0; width_turn < 3; width_turn ++) {
            if ()
            printf("%d ", ex[height_turn][width_turn]);

        }*/
    

   while (height_turn < height_max); {
        while (width_turn < width_max); {
            printf(ex[]);
            width_turn = width_turn + 1;
        }
        height_turn = height_turn + 1;
    }
    //printf("%d ", ex[0][0]);
}

#include <stdio.h>

void main() {

    int width_turn = 0;
    int height_turn = 0;

    int width_max = 3;
    int height_max = 3;

    int O = 0; /* O 는 숫자 1*/
    int X = 0;/* X 는 숫자 -1*/

    int width_temp = 0;
    int height_temp = 0;


    printf("Tic! Tac! Toe! 게임이 실행되었습니다. 게임의 크기는 3X3입니다.\n");
    printf("각 항목의 번호는 다음과 같습니다. X가 먼저시작합니다.\n");
    printf("가로, 세로, 대각선으로 3개의 표식을 연속시키면 승리하게됩니다.\n");

    int ex[3][3] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    

    int arr[3][3] = {
        {0, 0, 0},
        {0, 0, 0},
        {0, 0, 0}
    };
    /*int arraa = (height_max + width_max + 2);

    int arra[arraa];*/


    //처음 게임판 print
    for (height_turn = 0; height_turn < height_max; height_turn ++) {
        for (width_turn = 0; width_turn < width_max; width_turn ++) {
            printf("%d ", ex[height_turn][width_turn]);
            /*printf("%d ", height_turn);
            printf("%d ", width_turn);*/


        }
        printf("\n");
    }
    



    //게임이 끝났는지 판별
    for (height_turn = 0; height_turn < height_max; height_turn++) {
        for (width_turn = 0; width_turn < width_max; width_turn++) {
            width_temp = width_temp += arr[height_turn][width_turn];
            /*printf("%d ", height_turn);
            printf("%d ", width_turn);*/

        }
            //printf("%d ", width_temp);
        if (width_temp == width_max * 1) {
            O = 1;
            printf("O 의 승리 입니다.\n");
            break;
        }
        else if (width_temp == -(width_max * 1)) {
            X = 1;
            printf("X 의 승리 입니다.\n");
            break;
        }
        width_temp = 0;
    }

    if (O != 0) {

    }

    if (X != 0) {

    }




}

#include <stdio.h>

void main() {

    int width_turn = 0;
    int height_turn = 0;
  /*  int right_diagonal_turn = 0;
    int left_diagonal_turn = 0;*/

    int width_max = 3;
    int height_max = 3;
    //int right_diagonal_max = 0;
    //int left_diagonal_max = 0;

    int O = 0; /* O 는 숫자 1*/
    int X = 0;/* X 는 숫자 -1*/

    int width_temp = 0;
    int height_temp = 0;


    printf("Tic! Tac! Toe! 게임이 실행되었습니다. 게임의 크기는 3X3입니다.\n");
    printf("각 항목의 번호는 다음과 같습니다. X가 먼저시작합니다.\n");
    printf("가로, 세로, 대각선으로 3개의 표식을 연속시키면 승리하게됩니다.\n");

    /* int ex[3][3] = {
         {1, 2, 3},
         {4, 5, 6},
         {7, 8, 9}
     };*/


    char ex[3][3] = {
        {'#', '#', '#'},
        {'#', '#', '#'},
        {'#', '#', '#'}
    };


    int arr[3][3] = {
        {0, 0, 0},
        {0, 0, 0},
        {0, 0, 0}
    };
    /*int arraa = (height_max + width_max + 2);

    int arra[arraa];*/


    //처음 게임판 print
    for (height_turn = 0; height_turn < height_max; height_turn++) {
        for (width_turn = 0; width_turn < width_max; width_turn++) {
            //printf("%d ", ex[height_turn][width_turn]);
            printf("%c ", ex[height_turn][width_turn]);
            /*printf("%d ", height_turn);
            printf("%d ", width_turn);*/
        }
        printf("\n");
    }




    //게임이 끝났는지 판별

    //가로축 판별
    for (height_turn = 0; height_turn < height_max; height_turn++) {
        for (width_turn = 0; width_turn < width_max; width_turn++) {
            width_temp = width_temp += arr[height_turn][width_turn];
            /*printf("%d ", height_turn);
            printf("%d ", width_turn);*/

        }
        //printf("%d ", width_temp);
        if (width_temp == width_max * 1) {
            O = 1;
            printf("O 의 승리 입니다.\n");
            break;
        }
        else if (width_temp == -(width_max * 1)) {
            X = 1;
            printf("X 의 승리 입니다.\n");
            break;
        }
        width_temp = 0;
    }

    //세로축 판별
    for (width_turn = 0; width_turn < width_max; width_turn++) {
        for (height_turn = 0; height_turn < height_max; height_turn++) {
            height_temp = height_temp += arr[height_turn][width_turn];
            /*printf("%d ", height_turn);
            printf("%d ", width_turn);*/

        }
        //printf("%d ", width_temp);
        if (height_temp == height_max * 1) {
            O = 1;
            printf("O 의 승리 입니다.\n");
            break;
        }
        else if (height_temp == -(height_max * 1)) {
            X = 1;
            printf("X 의 승리 입니다.\n");
            break;
        }
        height_temp = 0;
    }

    //대각선축 판별
    for (width_turn = 0; width_turn < width_max; width_turn++) {
        for (height_turn = 0; height_turn < height_max; height_turn++) {
            height_temp = height_temp += arr[height_turn][width_turn];
            /*printf("%d ", height_turn);
            printf("%d ", width_turn);*/

        }
        //printf("%d ", width_temp);
        if (height_temp == height_max * 1) {
            O = 1;
            printf("O 의 승리 입니다.\n");
            break;
        }
        else if (height_temp == -(height_max * 1)) {
            X = 1;
            printf("X 의 승리 입니다.\n");
            break;
        }
        height_temp = 0;
    }

    if (O != 0) {

    }

    if (X != 0) {

    }



}
#include <stdio.h>

void main() {

    int width_turn = 0;
    int height_turn = 0;
    int right_diagonal_turn = 0;
    int left_diagonal_turn = 0;

    int width_max = 3;
    int height_max = 3;
    int right_diagonal_max = 3;
    int left_diagonal_max = 3;

    int O = 0; /* O 는 숫자 1*/
    int X = 0;/* X 는 숫자 -1*/

    int width_temp = 0;
    int height_temp = 0;
    int right_diagonal_temp = 0;
    int left_diagonal_temp = 0;


    printf("Tic! Tac! Toe! 게임이 실행되었습니다. 게임의 크기는 3X3입니다.\n");
    printf("각 항목의 번호는 다음과 같습니다. X가 먼저시작합니다.\n");
    printf("가로, 세로, 대각선으로 3개의 표식을 연속시키면 승리하게됩니다.\n");

     //int ex[3][3] = {
     //    {1, 2, 3},
     //    {4, 5, 6},
     //    {7, 8, 9}
     //};

    int ex[3][3] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
     };


    /*char game_board[3][3] = {
        {'#', '#', '#'},
        {'#', '#', '#'},
        {'#', '#', '#'}
    };*/


    int arr[3][3] = {
        {0, 0, 0},
        {0, 0, 0},
        {0, 0, 0}
    };
    /*int arraa = (height_max + width_max + 2);

    int arra[arraa];*/


    //처음 게임판 print
    for (height_turn = 0; height_turn < height_max; height_turn++) {
        for (width_turn = 0; width_turn < width_max; width_turn++) {
            printf("%d ", ex[height_turn][width_turn]);
            //printf("%c ", ex[height_turn][width_turn]);
            /*printf("%d ", height_turn);
            printf("%d ", width_turn);*/
        } 
        printf("\n");
    }






    //게임이 끝났는지 판별

    ////가로축 판별
    for (height_turn = 0; height_turn < height_max; height_turn++) {
        for (width_turn = 0; width_turn < width_max; width_turn++) {
            width_temp = width_temp += arr[height_turn][width_turn];
        }
        if (width_temp == width_max * 1) {
            O = 1;
            break;
        }
        else if (width_temp == -(width_max * 1)) {
            X = 1;
            break;
        }
        width_temp = 0;
    }

    ////세로축 판별
    for (width_turn = 0; width_turn < width_max; width_turn++) {
        for (height_turn = 0; height_turn < height_max; height_turn++) {
            height_temp = height_temp += arr[height_turn][width_turn];
        }
        if (height_temp == height_max * 1) {
            O = 1;
            break;
        }
        else if (height_temp == -(height_max * 1)) {
            X = 1;
            break;
        }
        height_temp = 0;
    }

    //대각선축 판별
    if (width_max == height_turn) {
        for (right_diagonal_turn = 0; right_diagonal_turn < width_max; right_diagonal_turn++) {
            right_diagonal_temp = right_diagonal_temp += arr[right_diagonal_turn][right_diagonal_turn];
            if (right_diagonal_temp == right_diagonal_max * 1) {
                O = 1;
                break;
            }
            else if (right_diagonal_temp == -(right_diagonal_max * 1)) {
                X = 1;
                break;
            }    
        }
    }

    if (width_max == height_turn) {
        for (left_diagonal_turn = 0; left_diagonal_turn < width_max; left_diagonal_turn++) {
            left_diagonal_temp = left_diagonal_temp -= arr[left_diagonal_max - left_diagonal_turn][left_diagonal_turn];
            if (left_diagonal_temp == left_diagonal_max * 1) {
                O = 1;
                break;
            }
            else if (left_diagonal_temp == -(left_diagonal_max * 1)) {
                X = 1;
                break;
            }
        }
    }

    if (O != 0) {
        printf("O 의 승리 입니다.\n");
    }
    if (X != 0) {
        printf("X 의 승리 입니다.\n");
    }

}


#include <stdio.h>

void main() {

    int width_turn = 0;
    int height_turn = 0;
    int right_diagonal_turn = 0;
    int left_diagonal_turn = 0;

    int width_max = 3;
    int height_max = 3;
    int right_diagonal_max = 3;
    int left_diagonal_max = 3;

    int O = 0; /* O 는 숫자 1*/
    int X = 0;/* X 는 숫자 -1*/

    int width_temp = 0;
    int height_temp = 0;
    int right_diagonal_temp = 0;
    int left_diagonal_temp = 0;

    int game_turn = 0;
    int gmae_turn_max = (width_max * height_max);

    int place = 0;
    int place_temp = 0;
    char place_mark;


    printf("Tic! Tac! Toe! 게임이 실행되었습니다. 게임의 크기는 3X3입니다.\n");
    printf("각 항목의 번호는 다음과 같습니다. X가 먼저시작합니다.\n");
    printf("가로, 세로, 대각선으로 3개의 표식을 연속시키면 승리하게됩니다.\n");

     //int ex[3][3] = {
     //    {1, 2, 3},
     //    {4, 5, 6},
     //    {7, 8, 9}
     //};

    int ex[3][3] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
     };


    char game_board[3][3] = {
        {'#', '#', '#'},
        {'#', '#', '#'},
        {'#', '#', '#'}
    };


    int arr[3][3] = {
        {0, 0, 0},
        {0, 0, 0},
        {0, 0, 0}
    };
    /*int arraa = (height_max + width_max + 2);

    int arra[arraa];*/


    //처음 게임판 print
    for (height_turn = 0; height_turn < height_max; height_turn++) {
        for (width_turn = 0; width_turn < width_max; width_turn++) {
            printf("%d ", ex[height_turn][width_turn]);
            //printf("%c ", ex[height_turn][width_turn]);
            /*printf("%d ", height_turn);
            printf("%d ", width_turn);*/
        } 
        printf("\n");
    }


    for (game_turn = 0; game_turn < gmae_turn_max; game_turn++) {
        if (game_turn % 2 == 0) {
            printf("O의 차례입니다.\n");
            place_temp = 1;
            place_mark = 'O';
        }

        else if (game_turn % 2 == 1) {
            printf("X의 차례입니다.\n");
            place_temp = -1;
            place_mark = 'X';
        }

        printf("위치를 선택해 주세요.\n");
        scanf("%d", &place);
        printf("입력한 번호는: %d\n", place);

        for (height_turn = 0; height_turn < height_max; height_turn++) {
            for (width_turn = 0; width_turn < width_max; width_turn++) {
                if (place == ex[height_turn][width_turn]) {
                    arr[height_turn][width_turn] = place_temp;
                    game_board[height_turn][width_turn] = place_mark;
                }
                printf("%c ", game_board[height_turn][width_turn]);
            }
            printf("\n");
        }

    }



        //게임이 끝났는지 판별

        //////가로축 판별
        for (height_turn = 0; height_turn < height_max; height_turn++) {
            for (width_turn = 0; width_turn < width_max; width_turn++) {
                width_temp = width_temp += arr[height_turn][width_turn];
            }
            if (width_temp == width_max * 1) {
                O = 1;
                break;
            }
            else if (width_temp == -(width_max * 1)) {
                X = 1;
                break;
            }
            width_temp = 0;
        }

        //////세로축 판별
        for (width_turn = 0; width_turn < width_max; width_turn++) {
            for (height_turn = 0; height_turn < height_max; height_turn++) {
                height_temp = height_temp += arr[height_turn][width_turn];
            }
            if (height_temp == height_max * 1) {
                O = 1;
                break;
            }
            else if (height_temp == -(height_max * 1)) {
                X = 1;
                break;
            }
            height_temp = 0;
        }

        ////대각선축 판별
        if (width_max == height_turn) {
            for (right_diagonal_turn = 0; right_diagonal_turn < width_max; right_diagonal_turn++) {
                right_diagonal_temp = right_diagonal_temp += arr[right_diagonal_turn][right_diagonal_turn];
                if (right_diagonal_temp == right_diagonal_max * 1) {
                    O = 1;
                    break;
                }
                else if (right_diagonal_temp == -(right_diagonal_max * 1)) {
                    X = 1;
                    break;
                }    
            }
        }

        if (width_max == height_turn) {
            for (left_diagonal_turn = 0; left_diagonal_turn < width_max; left_diagonal_turn++) {
                left_diagonal_temp = left_diagonal_temp -= arr[left_diagonal_max - left_diagonal_turn][left_diagonal_turn];
                if (left_diagonal_temp == left_diagonal_max * 1) {
                    O = 1;
                    break;
                }
                else if (left_diagonal_temp == -(left_diagonal_max * 1)) {
                    X = 1;
                    break;
                }
            }
        }

     /*   if (O != 0) {
            printf("O 의 승리 입니다.\n");
        }
        if (X != 0) {
            printf("X 의 승리 입니다.\n");
        }*/

    }
